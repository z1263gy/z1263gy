{"version":3,"sources":["jarrod.png","Coins.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Coins","_useState","useState","USD","code","rate","description","rate_float","AUD","_useState2","Object","slicedToArray","bpi","setBpi","react_default","a","createElement","onClick","fetch","then","results","json","jsonData","console","log","App","className","src","logo","alt","src_Coins","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sMCqCzBC,MAnCf,WAAiB,IAAAC,EACSC,mBAAS,CAC3BC,IAAK,CACDC,KAAM,GACNC,KAAM,GACNC,YAAa,GACbC,WAAY,GAEhBC,IAAK,CACDJ,KAAM,GACNC,KAAM,GACNC,YAAa,GACbC,WAAY,KAZPE,EAAAC,OAAAC,EAAA,EAAAD,CAAAT,EAAA,GACNW,EADMH,EAAA,GACDI,EADCJ,EAAA,GAuBb,OACIK,EAAAC,EAAAC,cAAA,0CAEIF,EAAAC,EAAAC,cAAA,WAAMJ,EAAIT,IAAIC,KAAd,KAAsBQ,EAAIT,IAAIE,MAC9BS,EAAAC,EAAAC,cAAA,WAAMJ,EAAIJ,IAAIJ,KAAd,KAAsBQ,EAAIJ,IAAIH,MAHlC,2BAKIS,EAAAC,EAAAC,cAAA,gBAAQ,UAAaJ,EAAIJ,IAAID,YAC7BO,EAAAC,EAAAC,cAAA,UAAQC,QAfI,WAChBC,MAAM,yDACDC,KAAK,SAAAC,GAAO,OAAIA,EAAQC,SACxBF,KAAK,SAAAG,GACFT,EAAOS,EAASV,KAChBW,QAAQC,IAAI,SAAUZ,OAU1B,iECZGa,MAff,WACI,OACIX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACXZ,EAAAC,EAAAC,cAAA,UAAQU,UAAU,cACdZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCf,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAACc,EAAD,SCDIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.f6586839.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jarrod.cd33a979.png\";","import React, {useState} from 'react'\r\n\r\nfunction Coins() {\r\n    const [bpi, setBpi] = useState({\r\n        USD: {\r\n            code: \"\",\r\n            rate: \"\",\r\n            description: \"\",\r\n            rate_float: 0.0,\r\n        },\r\n        AUD: {\r\n            code: \"\",\r\n            rate: \"\",\r\n            description: \"\",\r\n            rate_float: 0.0,\r\n        }\r\n    })\r\n    const handleClick = () => {\r\n        fetch('https://api.coindesk.com/v1/bpi/currentprice/AUD.json')\r\n            .then(results => results.json())\r\n            .then(jsonData => {\r\n                setBpi(jsonData.bpi);\r\n                console.log(\"bpi is\", bpi)\r\n            })\r\n    }\r\n    return (\r\n        <div>\r\n            The current price of Bitcoin\r\n            <div>{bpi.USD.code}: {bpi.USD.rate}</div>\r\n            <div>{bpi.AUD.code}: {bpi.AUD.rate}</div>\r\n            the current holdings are\r\n            <div>$ {0.12106304 * bpi.AUD.rate_float}</div>\r\n            <button onClick={handleClick}> click to get current bitcoin prices </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Coins","import React from 'react';\r\nimport Coins from './Coins.js'\r\nimport logo from './jarrod.png';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                <div>\r\n                    BITCOIN STANDINGS\r\n                </div>\r\n                <Coins />\r\n            </header>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}